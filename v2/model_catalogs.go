/*
 * 3DS OUTSCALE API
 *
 * Welcome to the OUTSCALE API documentation.<br /> The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br /> You can learn more about errors returned by the API in the dedicated [errors page](api/errors).<br /><br /> Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but there are [differences in resource names](https://docs.outscale.com/en/userguide/OUTSCALE-APIs-Reference.html) between AWS and the OUTSCALE API.<br /> You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.<br /><br /> An OpenAPI description of the OUTSCALE API is also available in this [GitHub repository](https://github.com/outscale/osc-api).
 *
 * API version: 1.26
 * Contact: support@outscale.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package osc

import (
	"encoding/json"
	"time"
)

// Catalogs Information about the catalogs.
type Catalogs struct {
	// One or more catalog entries.
	Entries *[]CatalogEntry `json:"Entries,omitempty"`
	// The beginning of the time period, in ISO 8601 date-time format.
	FromDate *time.Time `json:"FromDate,omitempty"`
	// The state of the catalog (`CURRENT` \\| `OBSOLETE`).
	State *string `json:"State,omitempty"`
	// The end of the time period, in ISO 8601 date-time format.
	ToDate *time.Time `json:"ToDate,omitempty"`
}

// NewCatalogs instantiates a new Catalogs object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCatalogs() *Catalogs {
	this := Catalogs{}
	return &this
}

// NewCatalogsWithDefaults instantiates a new Catalogs object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCatalogsWithDefaults() *Catalogs {
	this := Catalogs{}
	return &this
}

// GetEntries returns the Entries field value if set, zero value otherwise.
func (o *Catalogs) GetEntries() []CatalogEntry {
	if o == nil || o.Entries == nil {
		var ret []CatalogEntry
		return ret
	}
	return *o.Entries
}

// GetEntriesOk returns a tuple with the Entries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Catalogs) GetEntriesOk() (*[]CatalogEntry, bool) {
	if o == nil || o.Entries == nil {
		return nil, false
	}
	return o.Entries, true
}

// HasEntries returns a boolean if a field has been set.
func (o *Catalogs) HasEntries() bool {
	if o != nil && o.Entries != nil {
		return true
	}

	return false
}

// SetEntries gets a reference to the given []CatalogEntry and assigns it to the Entries field.
func (o *Catalogs) SetEntries(v []CatalogEntry) {
	o.Entries = &v
}

// GetFromDate returns the FromDate field value if set, zero value otherwise.
func (o *Catalogs) GetFromDate() time.Time {
	if o == nil || o.FromDate == nil {
		var ret time.Time
		return ret
	}
	return *o.FromDate
}

// GetFromDateOk returns a tuple with the FromDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Catalogs) GetFromDateOk() (*time.Time, bool) {
	if o == nil || o.FromDate == nil {
		return nil, false
	}
	return o.FromDate, true
}

// HasFromDate returns a boolean if a field has been set.
func (o *Catalogs) HasFromDate() bool {
	if o != nil && o.FromDate != nil {
		return true
	}

	return false
}

// SetFromDate gets a reference to the given time.Time and assigns it to the FromDate field.
func (o *Catalogs) SetFromDate(v time.Time) {
	o.FromDate = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *Catalogs) GetState() string {
	if o == nil || o.State == nil {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Catalogs) GetStateOk() (*string, bool) {
	if o == nil || o.State == nil {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *Catalogs) HasState() bool {
	if o != nil && o.State != nil {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *Catalogs) SetState(v string) {
	o.State = &v
}

// GetToDate returns the ToDate field value if set, zero value otherwise.
func (o *Catalogs) GetToDate() time.Time {
	if o == nil || o.ToDate == nil {
		var ret time.Time
		return ret
	}
	return *o.ToDate
}

// GetToDateOk returns a tuple with the ToDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Catalogs) GetToDateOk() (*time.Time, bool) {
	if o == nil || o.ToDate == nil {
		return nil, false
	}
	return o.ToDate, true
}

// HasToDate returns a boolean if a field has been set.
func (o *Catalogs) HasToDate() bool {
	if o != nil && o.ToDate != nil {
		return true
	}

	return false
}

// SetToDate gets a reference to the given time.Time and assigns it to the ToDate field.
func (o *Catalogs) SetToDate(v time.Time) {
	o.ToDate = &v
}

func (o Catalogs) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Entries != nil {
		toSerialize["Entries"] = o.Entries
	}
	if o.FromDate != nil {
		toSerialize["FromDate"] = o.FromDate
	}
	if o.State != nil {
		toSerialize["State"] = o.State
	}
	if o.ToDate != nil {
		toSerialize["ToDate"] = o.ToDate
	}
	return json.Marshal(toSerialize)
}

type NullableCatalogs struct {
	value *Catalogs
	isSet bool
}

func (v NullableCatalogs) Get() *Catalogs {
	return v.value
}

func (v *NullableCatalogs) Set(val *Catalogs) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogs) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogs) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogs(val *Catalogs) *NullableCatalogs {
	return &NullableCatalogs{value: val, isSet: true}
}

func (v NullableCatalogs) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogs) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
