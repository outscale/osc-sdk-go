/*
 * 3DS OUTSCALE API
 *
 * Welcome to the OUTSCALE API documentation.<br /> The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br /> You can learn more about errors returned by the API in the dedicated [errors page](api/errors).<br /><br /> Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but there are [differences in resource names](https://docs.outscale.com/en/userguide/OUTSCALE-APIs-Reference.html) between AWS and the OUTSCALE API.<br /> You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.<br /><br /> An OpenAPI description of the OUTSCALE API is also available in this [GitHub repository](https://github.com/outscale/osc-api).
 *
 * API version: 1.26
 * Contact: support@outscale.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package osc

import (
	"encoding/json"
)

// CreateVmGroupResponse struct for CreateVmGroupResponse
type CreateVmGroupResponse struct {
	ResponseContext *ResponseContext `json:"ResponseContext,omitempty"`
	VmGroup         *VmGroup         `json:"VmGroup,omitempty"`
}

// NewCreateVmGroupResponse instantiates a new CreateVmGroupResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateVmGroupResponse() *CreateVmGroupResponse {
	this := CreateVmGroupResponse{}
	return &this
}

// NewCreateVmGroupResponseWithDefaults instantiates a new CreateVmGroupResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateVmGroupResponseWithDefaults() *CreateVmGroupResponse {
	this := CreateVmGroupResponse{}
	return &this
}

// GetResponseContext returns the ResponseContext field value if set, zero value otherwise.
func (o *CreateVmGroupResponse) GetResponseContext() ResponseContext {
	if o == nil || o.ResponseContext == nil {
		var ret ResponseContext
		return ret
	}
	return *o.ResponseContext
}

// GetResponseContextOk returns a tuple with the ResponseContext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateVmGroupResponse) GetResponseContextOk() (*ResponseContext, bool) {
	if o == nil || o.ResponseContext == nil {
		return nil, false
	}
	return o.ResponseContext, true
}

// HasResponseContext returns a boolean if a field has been set.
func (o *CreateVmGroupResponse) HasResponseContext() bool {
	if o != nil && o.ResponseContext != nil {
		return true
	}

	return false
}

// SetResponseContext gets a reference to the given ResponseContext and assigns it to the ResponseContext field.
func (o *CreateVmGroupResponse) SetResponseContext(v ResponseContext) {
	o.ResponseContext = &v
}

// GetVmGroup returns the VmGroup field value if set, zero value otherwise.
func (o *CreateVmGroupResponse) GetVmGroup() VmGroup {
	if o == nil || o.VmGroup == nil {
		var ret VmGroup
		return ret
	}
	return *o.VmGroup
}

// GetVmGroupOk returns a tuple with the VmGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateVmGroupResponse) GetVmGroupOk() (*VmGroup, bool) {
	if o == nil || o.VmGroup == nil {
		return nil, false
	}
	return o.VmGroup, true
}

// HasVmGroup returns a boolean if a field has been set.
func (o *CreateVmGroupResponse) HasVmGroup() bool {
	if o != nil && o.VmGroup != nil {
		return true
	}

	return false
}

// SetVmGroup gets a reference to the given VmGroup and assigns it to the VmGroup field.
func (o *CreateVmGroupResponse) SetVmGroup(v VmGroup) {
	o.VmGroup = &v
}

func (o CreateVmGroupResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ResponseContext != nil {
		toSerialize["ResponseContext"] = o.ResponseContext
	}
	if o.VmGroup != nil {
		toSerialize["VmGroup"] = o.VmGroup
	}
	return json.Marshal(toSerialize)
}

type NullableCreateVmGroupResponse struct {
	value *CreateVmGroupResponse
	isSet bool
}

func (v NullableCreateVmGroupResponse) Get() *CreateVmGroupResponse {
	return v.value
}

func (v *NullableCreateVmGroupResponse) Set(val *CreateVmGroupResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateVmGroupResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateVmGroupResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateVmGroupResponse(val *CreateVmGroupResponse) *NullableCreateVmGroupResponse {
	return &NullableCreateVmGroupResponse{value: val, isSet: true}
}

func (v NullableCreateVmGroupResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateVmGroupResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
