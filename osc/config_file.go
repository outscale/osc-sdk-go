/*
 * 3DS OUTSCALE API
 *
 * Welcome to the OUTSCALE API documentation.<br /><br />  The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br />  Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but some resources have different names in AWS than in the OUTSCALE API. You can find a list of the differences [here](https://docs.outscale.com/en/userguide/OUTSCALE-APIs-Reference.html).<br /><br />  You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.
 *
 * API version: 1.18
 * Contact: support@outscale.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package osc

import (
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"os"
	"path"
)

type ConfigFile struct {
	profiles map[string]Profile
}

type Profile struct {
	AccessKey       string   `json:"access_key"`
	SecretKey       string   `json:"secret_key"`
	X509ClientCert  string   `json:"x509_client_cert"`
	X509_client_key string   `json:"x509_client_key"`
	Protocol        string   `json:"protocol"`
	Method          string   `json:"method"`
	Region          string   `json:"region"`
	Endpoints       Endpoint `json:"endpoints"`
}

type Endpoint struct {
	API string `json:"api"`
	FCU string `json:"fcu"`
	LBU string `json:"lbu"`
	EIM string `json:"eim"`
	ICU string `json:"icu"`
	OOS string `json:"oos"`
}

func NewConfigFile() *ConfigFile {
	return &ConfigFile{
		profiles: make(map[string]Profile),
	}
}

func defaultConfigPath() (string, error) {
	home, err := os.UserHomeDir()
	if err != nil {
		return "", err
	}
	return path.Join(home, ".osc", "config.json"), nil
}

func LoadDefaultConfigFile() (*ConfigFile, error) {
	configPath, err := defaultConfigPath()
	if err != nil {
		return nil, err
	}
	return LoadConfigFile(&configPath)
}

func LoadConfigFile(path *string) (*ConfigFile, error) {
	if path == nil || len(*path) == 0 {
		return nil, errors.New("no path provided")
	}
	config_json, err := ioutil.ReadFile(*path)
	if err != nil {
		return nil, err
	}
	configFile := NewConfigFile()
	if err := json.Unmarshal(config_json, &configFile.profiles); err != nil {
		return nil, err
	}
	return configFile, nil
}

func (config *ConfigFile) Context(profileName string) (*context.Context, error) {
	profile, ok := config.profiles[profileName]
	if !ok {
		return nil, errors.New("profile not found for creating Context, did you load config file?")
	}
	context := context.WithValue(context.Background(), ContextAWSv4, AWSv4{
		AccessKey: profile.AccessKey,
		SecretKey: profile.SecretKey,
	})
	return &context, nil
}

func (config *ConfigFile) ConfigFromProfileEndpoint(profileName string) (*Configuration, error) {
	profile, ok := config.profiles[profileName]
	if !ok {
		return nil, errors.New("profile not found for creating Config, did you load config file?")
	}
	if len(profile.Endpoints.API) == 0 {
		return nil, errors.New("profile does not specify API's endpoint")
	}
	protocol := "https"
	if len(profile.Protocol) > 0 {
		protocol = profile.Protocol
	}
	url := fmt.Sprintf("%s://%s", protocol, profile.Endpoints.API)
	oscConfig := NewConfiguration()
	oscConfig.BasePath = url
	oscConfig.Servers = []ServerConfiguration{}
	return oscConfig, nil
}

func (config *ConfigFile) ConfigFromProfileRegion(profileName string) (*Configuration, error) {
	profile, ok := config.profiles[profileName]
	if !ok {
		return nil, errors.New("profile not found for creating Config, did you load config file?")
	}
	if len(profile.Region) == 0 {
		return nil, errors.New("profile does not specify region parameter")
	}
	oscConfig := NewConfiguration()
	oscConfig.BasePath, _ = oscConfig.ServerUrl(0, map[string]string{"region": profile.Region})
	return oscConfig, nil
}
