From f37b3eb33eb7b811aa9c715bede18a6ec4ccf312 Mon Sep 17 00:00:00 2001
From: Ubuntu <outscale@ip-10-9-21-61.eu-west-2.compute.internal>
Date: Tue, 13 Sep 2022 15:31:21 +0000
Subject: [PATCH] add helper

Signed-off-by: Ubuntu <outscale@ip-10-9-21-61.eu-west-2.compute.internal>
---
 osc/model_load_credentials.go      | 82 ++++++++++++++++++++++++++++++
 osc/model_load_credentials_test.go | 82 ++++++++++++++++++++++++++++++
 2 files changed, 164 insertions(+)
 create mode 100644 osc/model_load_credentials.go
 create mode 100644 osc/model_load_credentials_test.go

diff --git a/osc/model_load_credentials.go b/osc/model_load_credentials.go
new file mode 100644
index 00000000..a661d368
--- /dev/null
+++ b/osc/model_load_credentials.go
@@ -0,0 +1,82 @@
+/*
+  BSD 3-Clause License
+  Copyright (c) 2022, Outscale SAS
+  All rights reserved.
+  Redistribution and use in source and binary forms, with or without
+  modification, are permitted provided that the following conditions are met:
+  * Redistributions of source code must retain the above copyright notice, this
+    list of conditions and the following disclaimer.
+  * Redistributions in binary form must reproduce the above copyright notice,
+    this list of conditions and the following disclaimer in the documentation
+    and/or other materials provided with the distribution.
+  * Neither the name of the copyright holder nor the names of its
+    contributors may be used to endorse or promote products derived from
+    this software without specific prior written permission.
+  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
+  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+*/
+
+package osc
+
+import (
+	"context"
+	"errors"
+	"fmt"
+)
+
+type Credentials struct {
+	ConfigEnv
+}
+
+func (c Credentials) retrieveCreds() (*Configuration, error) {
+	configEnv := NewConfigEnv()
+	if configEnv.AccessKey != nil && configEnv.SecretKey != nil {
+		config, err := configEnv.Configuration(); err!= nil {
+			return nil, errors.New("error in loading env variables")
+		}
+		return config, nil
+	} else {
+		profileName := *configEnv.ProfileName
+		if profileName == "" {
+			profileName = "Default"
+		}
+		fmt.Println("profileName is ", profileName)
+		configFile, err := LoadDefaultConfigFile() ; err != nil {
+			return nil, err
+		}
+		config, err := configFile.Configuration(profileName) ; err != nil {
+			return nil, errors.New("error in loading variables fromm config file")
+		}
+		return config, nil
+	}
+}
+
+func (c *Credentials) Context(ctx context.Context) (context.Context, error) {
+	configEnv := *NewConfigEnv()
+	if configEnv.AccessKey != nil && configEnv.SecretKey != nil {
+		ctx, err := configEnv.Context(ctx) ; err != nil {
+			return nil, errors.New("cannot create context from env var")
+		}
+		return ctx, nil
+	} else {
+		configFile, err := LoadDefaultConfigFile() ; err != nil {
+			return nil, err
+		}
+		profileName := configEnv.ProfileName
+		if len(*profileName) == 0 {
+			*profileName = "Default"
+		}
+		ctx, err := configFile.Context(ctx, *profileName) ; err != nil {
+			return nil, errors.New("cannot create context from file, did you load config file")
+		}
+		return ctx, nil
+	}
+}
diff --git a/osc/model_load_credentials_test.go b/osc/model_load_credentials_test.go
new file mode 100644
index 00000000..5f1bff1f
--- /dev/null
+++ b/osc/model_load_credentials_test.go
@@ -0,0 +1,82 @@
+/*
+  BSD 3-Clause License
+  Copyright (c) 2022, Outscale SAS
+  All rights reserved.
+  Redistribution and use in source and binary forms, with or without
+  modification, are permitted provided that the following conditions are met:
+  * Redistributions of source code must retain the above copyright notice, this
+    list of conditions and the following disclaimer.
+  * Redistributions in binary form must reproduce the above copyright notice,
+    this list of conditions and the following disclaimer in the documentation
+    and/or other materials provided with the distribution.
+  * Neither the name of the copyright holder nor the names of its
+    contributors may be used to endorse or promote products derived from
+    this software without specific prior written permission.
+  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
+  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+*/
+
+package osc
+
+import (
+	"context"
+	"fmt"
+	"os"
+	"testing"
+)
+
+func TestWithAKSK(t *testing.T) {
+	var creds Credentials
+	config, err := creds.retrieveCreds()
+	if err != nil {
+		t.Fatalf("Cannot create configutation: %s", err.Error())
+	}
+	ctx, err := creds.Context(context.Background())
+	if err != nil {
+		t.Fatalf("Cannot create context for making a query: %s", err.Error())
+	}
+	testConfAndContextOk(t, config, &ctx)
+}
+
+func TestWithProfileName(t *testing.T) {
+	if err := os.Setenv("OSC_PROFILE", "SomeProfile"); err != nil {
+		t.Fatalf("Cannot set OSC_PROFILE: %s", err.Error())
+	}
+	ak := os.Getenv("OSC_ACCESS_KEY")
+	sk := os.Getenv("OSC_SECRET_KEY")
+	region := os.Getenv("OSC_REGION")
+	content := fmt.Sprintf(`{
+		"SomeProfile": {
+			"access_key": "%s",
+			"secret_key": "%s",
+			"region": "%s"
+		}}`, ak, sk, region)
+	configPath := "/tmp/osc-sdk-go-TestBasicConfigFileWithValidRegion2"
+	if err := testDumpToFile(configPath, content); err != nil {
+		t.Fatalf("Error: %s", err.Error())
+	}
+	defer os.Remove(configPath)
+
+	var creds Credentials
+	config, err := creds.retrieveCreds()
+	if err != nil {
+		t.Fatalf("Cannot create configutation: %s", err.Error())
+	}
+	ctx, err := creds.Context(context.Background())
+	if err != nil {
+		t.Fatalf("Cannot create context for making a query: %s", err.Error())
+	}
+	client := NewAPIClient(config)
+	_, _, err = client.SubregionApi.ReadSubregions(ctx, nil)
+	if err != nil {
+		t.Fatalf("Cannot call ReadSubregions: %s", err.Error())
+	}
+}
-- 
2.25.1

