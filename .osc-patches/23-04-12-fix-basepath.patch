From ce3b667ff13d26dc51064ab24e7709abab29624c Mon Sep 17 00:00:00 2001
From: Maxime Dufour <maxime.dufour@outscale.com>
Date: Wed, 12 Apr 2023 11:07:31 +0000
Subject: [PATCH 1/3] Fix BasePath in the configuration using env or file

---
 osc/config_env.go  | 28 ++++++----------------------
 osc/config_file.go | 31 ++++++++++---------------------
 2 files changed, 16 insertions(+), 43 deletions(-)

diff --git a/osc/config_env.go b/osc/config_env.go
index 9fcd634f..ebc2d989 100644
--- a/osc/config_env.go
+++ b/osc/config_env.go
@@ -29,6 +29,7 @@ package osc
 import (
 	"context"
 	"errors"
+	"fmt"
 	"os"
 )
 
@@ -74,34 +75,17 @@ func (configEnv *ConfigEnv) Configuration() (*Configuration, error) {
 		}
 	} else {
 		config = NewConfiguration()
-		default_region := "eu-west-2"
-		config.Servers = []ServerConfiguration{
-			{
-				Url:         "https://api.{region}.outscale.com/api/v1",
-				Description: "Loaded from profile",
-				Variables: map[string]ServerVariable{
-					"region": ServerVariable{
-						Description:  "Loaded from env variables",
-						DefaultValue: default_region,
-						EnumValues:   []string{default_region},
-					},
-				},
-			},
-		}
+	}
+
+	if configEnv.Region != nil {
+		config.BasePath = fmt.Sprintf("https://api.%s.outscale.com/api/v1", *configEnv.Region)
 	}
 
 	// Overload with remaining environement variable values
 	if configEnv.OutscaleApiEndpoint != nil {
-		config.Servers[0].Url = *configEnv.OutscaleApiEndpoint
+		config.BasePath = fmt.Sprintf("https://%s", *configEnv.OutscaleApiEndpoint)
 	}
 
-	if configEnv.Region != nil && len(config.Servers) > 0 {
-		config.Servers[0].Variables["region"] = ServerVariable{
-			Description:  "Loaded from env variables",
-			DefaultValue: *configEnv.Region,
-			EnumValues:   []string{*configEnv.Region},
-		}
-	}
 	return config, nil
 }
 
diff --git a/osc/config_file.go b/osc/config_file.go
index b35e9537..65b45b03 100644
--- a/osc/config_file.go
+++ b/osc/config_file.go
@@ -120,6 +120,14 @@ func (configFile *ConfigFile) Configuration(profileName string) (*Configuration,
 	if !ok {
 		return nil, errors.New("profile not found for creating Context, did you load config file?")
 	}
+
+	var region string
+	if len(profile.Region) > 0 {
+		region = profile.Region
+	} else {
+		region = "eu-west-2"
+	}
+
 	var url string
 	if len(profile.Endpoints.API) > 0 {
 		if len(profile.Protocol) > 0 {
@@ -128,29 +136,10 @@ func (configFile *ConfigFile) Configuration(profileName string) (*Configuration,
 			url = fmt.Sprintf("https://%s", profile.Endpoints.API)
 		}
 	} else {
-		url = "https://api.{region}.outscale.com/api/v1"
-	}
-
-	var region string
-	if len(profile.Region) > 0 {
-		region = profile.Region
-	} else {
-		region = "eu-west-2"
+		url = fmt.Sprintf("https://api.%s.outscale.com/api/v1", region)
 	}
 
 	config := NewConfiguration()
-	config.Servers = []ServerConfiguration{
-		{
-			Url:         url,
-			Description: "Loaded from profile",
-			Variables: map[string]ServerVariable{
-				"region": ServerVariable{
-					Description:  "Loaded from profile",
-					DefaultValue: region,
-					EnumValues:   []string{region},
-				},
-			},
-		},
-	}
+	config.BasePath = url
 	return config, nil
 }
-- 
2.30.2


From d4cd87a6087de5e3aea5b948d27b85570e29229e Mon Sep 17 00:00:00 2001
From: Maxime Dufour <maxime.dufour@outscale.com>
Date: Wed, 12 Apr 2023 11:09:37 +0000
Subject: [PATCH 2/3] Unset OSC_PROFILE if necessary after tests

---
 osc/config_env_test.go | 6 ++++++
 1 file changed, 6 insertions(+)

diff --git a/osc/config_env_test.go b/osc/config_env_test.go
index 562783d9..2610ee36 100644
--- a/osc/config_env_test.go
+++ b/osc/config_env_test.go
@@ -48,6 +48,7 @@ func TestEnvVariablesAkSk(t *testing.T) {
 }
 
 func TestEnvVariablesWithProfile(t *testing.T) {
+	profile := os.Getenv("OSC_PROFILE")
 	if err := os.Setenv("OSC_PROFILE", "SomeProfile"); err != nil {
 		t.Fatalf("Cannot set OSC_PROFILE: %s", err.Error())
 	}
@@ -60,6 +61,11 @@ func TestEnvVariablesWithProfile(t *testing.T) {
 	defer os.Setenv("OSC_ACCESS_KEY", ak)
 	defer os.Setenv("OSC_SECRET_KEY", sk)
 	defer os.Setenv("OSC_REGION", region)
+	if profile != "" {
+		defer os.Setenv("OSC_PROFILE", profile)
+	} else {
+		defer os.Unsetenv("OSC_PROFILE")
+	}
 
 	home, err := os.UserHomeDir()
 	if err != nil {
-- 
2.30.2


From 0329ceca0d5e62f78aa521663b0742e91a64e9db Mon Sep 17 00:00:00 2001
From: Maxime Dufour <maxime.dufour@outscale.com>
Date: Wed, 12 Apr 2023 11:10:37 +0000
Subject: [PATCH 3/3] Use ConfigEnv in the examples

---
 examples/debug_test.go           |  7 ++++++-
 examples/image_test.go           |  8 +++++++-
 examples/keypair_test.go         |  8 +++++++-
 examples/load_balancer_test.go   | 13 +++++++++++--
 examples/public_ip_test.go       |  8 +++++++-
 examples/region_test.go          |  8 ++++++--
 examples/security_group_test.go  |  8 +++++++-
 examples/snapshot_test.go        |  8 +++++++-
 examples/tag_test.go             | 10 ++++++++--
 examples/virtual_machine_test.go | 10 ++++++++--
 examples/volume_test.go          | 10 ++++++++--
 11 files changed, 82 insertions(+), 16 deletions(-)

diff --git a/examples/debug_test.go b/examples/debug_test.go
index 034f2394..7e644c4b 100644
--- a/examples/debug_test.go
+++ b/examples/debug_test.go
@@ -45,7 +45,12 @@ A quick example which show how to enable SDK debuging in case you have to see wh
 This examples just list existing volumes and shows HTTP details.
 */
 func ExampleDebug() {
-	config := osc.NewConfiguration()
+	configEnv := osc.NewConfigEnv()
+	config, err := configEnv.Configuration()
+	if err != nil {
+		fmt.Fprintf(os.Stderr, "Cannot create configuration: %s\n", err.Error())
+		os.Exit(1)
+	}
 
 	config.Debug = true // <-- may be useful
 
diff --git a/examples/image_test.go b/examples/image_test.go
index ee9d35c8..0430d9ac 100644
--- a/examples/image_test.go
+++ b/examples/image_test.go
@@ -41,7 +41,13 @@ import (
 
 /* Image Example: list machine images and get details */
 func ExampleImage() {
-	client := osc.NewAPIClient(osc.NewConfiguration())
+	configEnv := osc.NewConfigEnv()
+	config, err := configEnv.Configuration()
+	if err != nil {
+		fmt.Fprintf(os.Stderr, "Cannot create configuration: %s\n", err.Error())
+		os.Exit(1)
+	}
+	client := osc.NewAPIClient(config)
 	auth := context.WithValue(context.Background(), osc.ContextAWSv4, osc.AWSv4{
 		AccessKey: os.Getenv("OSC_ACCESS_KEY"),
 		SecretKey: os.Getenv("OSC_SECRET_KEY"),
diff --git a/examples/keypair_test.go b/examples/keypair_test.go
index 84c50c75..0ee8c227 100644
--- a/examples/keypair_test.go
+++ b/examples/keypair_test.go
@@ -49,7 +49,13 @@ import (
 - Delete keypair
 */
 func ExampleKeypair() {
-	client := osc.NewAPIClient(osc.NewConfiguration())
+	configEnv := osc.NewConfigEnv()
+	config, err := configEnv.Configuration()
+	if err != nil {
+		fmt.Fprintf(os.Stderr, "Cannot create configuration: %s\n", err.Error())
+		os.Exit(1)
+	}
+	client := osc.NewAPIClient(config)
 	auth := context.WithValue(context.Background(), osc.ContextAWSv4, osc.AWSv4{
 		AccessKey: os.Getenv("OSC_ACCESS_KEY"),
 		SecretKey: os.Getenv("OSC_SECRET_KEY"),
diff --git a/examples/load_balancer_test.go b/examples/load_balancer_test.go
index 528f4c86..bf976149 100644
--- a/examples/load_balancer_test.go
+++ b/examples/load_balancer_test.go
@@ -52,8 +52,17 @@ import (
 */
 func ExampleLoadBalancer() {
 	loadBalancerName := "OscSdkExample-" + RandomString(10)
-	loadBalancerSubRegion := "eu-west-2a"
-	config := osc.NewConfiguration()
+	configEnv := osc.NewConfigEnv()
+	config, err := configEnv.Configuration()
+	if err != nil {
+		fmt.Fprintf(os.Stderr, "Cannot create configuration: %s\n", err.Error())
+		os.Exit(1)
+	}
+	if configEnv.Region == nil {
+		fmt.Fprintln(os.Stderr, "The region is not specified using OSC_REGION")
+		os.Exit(1)
+	}
+	loadBalancerSubRegion := fmt.Sprintf("%sa", *configEnv.Region)
 	config.Debug = false
 	client := osc.NewAPIClient(config)
 	auth := context.WithValue(context.Background(), osc.ContextAWSv4, osc.AWSv4{
diff --git a/examples/public_ip_test.go b/examples/public_ip_test.go
index d52e4252..d6072f65 100644
--- a/examples/public_ip_test.go
+++ b/examples/public_ip_test.go
@@ -48,7 +48,13 @@ import (
 - Delete Public IP
 */
 func ExamplePublicIp() {
-	client := osc.NewAPIClient(osc.NewConfiguration())
+	configEnv := osc.NewConfigEnv()
+	config, err := configEnv.Configuration()
+	if err != nil {
+		fmt.Fprintf(os.Stderr, "Cannot create configuration: %s\n", err.Error())
+		os.Exit(1)
+	}
+	client := osc.NewAPIClient(config)
 	auth := context.WithValue(context.Background(), osc.ContextAWSv4, osc.AWSv4{
 		AccessKey: os.Getenv("OSC_ACCESS_KEY"),
 		SecretKey: os.Getenv("OSC_SECRET_KEY"),
diff --git a/examples/region_test.go b/examples/region_test.go
index 93a35791..44d9d72a 100644
--- a/examples/region_test.go
+++ b/examples/region_test.go
@@ -47,8 +47,12 @@ import (
 - Display subregions status
 */
 func ExampleRegion() {
-	config := osc.NewConfiguration()
-	config.BasePath, _ = config.ServerUrl(0, map[string]string{"region": "eu-west-2"})
+	configEnv := osc.NewConfigEnv()
+	config, err := configEnv.Configuration()
+	if err != nil {
+		fmt.Fprintf(os.Stderr, "Cannot create configuration: %s\n", err.Error())
+		os.Exit(1)
+	}
 	client := osc.NewAPIClient(config)
 	auth := context.WithValue(context.Background(), osc.ContextAWSv4, osc.AWSv4{
 		AccessKey: os.Getenv("OSC_ACCESS_KEY"),
diff --git a/examples/security_group_test.go b/examples/security_group_test.go
index 347b86cc..a540d7ec 100644
--- a/examples/security_group_test.go
+++ b/examples/security_group_test.go
@@ -50,7 +50,13 @@ import (
 - Delete Security Group
 */
 func ExampleSecurityGroup() {
-	client := osc.NewAPIClient(osc.NewConfiguration())
+	configEnv := osc.NewConfigEnv()
+	config, err := configEnv.Configuration()
+	if err != nil {
+		fmt.Fprintf(os.Stderr, "Cannot create configuration: %s\n", err.Error())
+		os.Exit(1)
+	}
+	client := osc.NewAPIClient(config)
 	auth := context.WithValue(context.Background(), osc.ContextAWSv4, osc.AWSv4{
 		AccessKey: os.Getenv("OSC_ACCESS_KEY"),
 		SecretKey: os.Getenv("OSC_SECRET_KEY"),
diff --git a/examples/snapshot_test.go b/examples/snapshot_test.go
index 34a0a636..85a9e7c6 100644
--- a/examples/snapshot_test.go
+++ b/examples/snapshot_test.go
@@ -48,7 +48,13 @@ import (
 - Delete new snapshot
 */
 func ExampleSnapshot() {
-	client := osc.NewAPIClient(osc.NewConfiguration())
+	configEnv := osc.NewConfigEnv()
+	config, err := configEnv.Configuration()
+	if err != nil {
+		fmt.Fprintf(os.Stderr, "Cannot create configuration: %s\n", err.Error())
+		os.Exit(1)
+	}
+	client := osc.NewAPIClient(config)
 	auth := context.WithValue(context.Background(), osc.ContextAWSv4, osc.AWSv4{
 		AccessKey: os.Getenv("OSC_ACCESS_KEY"),
 		SecretKey: os.Getenv("OSC_SECRET_KEY"),
diff --git a/examples/tag_test.go b/examples/tag_test.go
index 567cc305..61dc25db 100644
--- a/examples/tag_test.go
+++ b/examples/tag_test.go
@@ -49,7 +49,13 @@ Example of adding tags on a resource (e.g. a virtual volume)
  5. delete volume
 */
 func ExampleTag() {
-	client := osc.NewAPIClient(osc.NewConfiguration())
+	configEnv := osc.NewConfigEnv()
+	config, err := configEnv.Configuration()
+	if err != nil {
+		fmt.Fprintf(os.Stderr, "Cannot create configuration: %s\n", err.Error())
+		os.Exit(1)
+	}
+	client := osc.NewAPIClient(config)
 	auth := context.WithValue(context.Background(), osc.ContextAWSv4, osc.AWSv4{
 		AccessKey: os.Getenv("OSC_ACCESS_KEY"),
 		SecretKey: os.Getenv("OSC_SECRET_KEY"),
@@ -61,7 +67,7 @@ func ExampleTag() {
 			osc.CreateVolumeRequest{
 				Size:          10,
 				VolumeType:    "gp2",
-				SubregionName: "eu-west-2a",
+				SubregionName: fmt.Sprintf("%sa", *configEnv.Region),
 			}),
 	}
 	volumeCreation, httpRes, err := client.VolumeApi.CreateVolume(auth, &volumeCreationOpts)
diff --git a/examples/virtual_machine_test.go b/examples/virtual_machine_test.go
index 131d47b3..0dc0d503 100644
--- a/examples/virtual_machine_test.go
+++ b/examples/virtual_machine_test.go
@@ -51,7 +51,13 @@ import (
 Note that to access a virtual machine, you will also need at least to provide a security group with appropriate rules (e.g. TCP port 22) and a keypair at creation.
 */
 func ExampleVirtualMachine() {
-	client := osc.NewAPIClient(osc.NewConfiguration())
+	configEnv := osc.NewConfigEnv()
+	config, err := configEnv.Configuration()
+	if err != nil {
+		fmt.Fprintf(os.Stderr, "Cannot create configuration: %s\n", err.Error())
+		os.Exit(1)
+	}
+	client := osc.NewAPIClient(config)
 	auth := context.WithValue(context.Background(), osc.ContextAWSv4, osc.AWSv4{
 		AccessKey: os.Getenv("OSC_ACCESS_KEY"),
 		SecretKey: os.Getenv("OSC_SECRET_KEY"),
@@ -74,7 +80,7 @@ func ExampleVirtualMachine() {
 	creationOpts := osc.CreateVmsOpts{
 		CreateVmsRequest: optional.NewInterface(
 			osc.CreateVmsRequest{
-				ImageId: "ami-68ed4301",
+				ImageId: os.Getenv("OMI_ID"),
 				VmType:  "tinav4.c1r1p1",
 			}),
 	}
diff --git a/examples/volume_test.go b/examples/volume_test.go
index 08eded42..603d00b6 100644
--- a/examples/volume_test.go
+++ b/examples/volume_test.go
@@ -48,7 +48,13 @@ import (
 - Delete new volume
 */
 func ExampleVolume() {
-	client := osc.NewAPIClient(osc.NewConfiguration())
+	configEnv := osc.NewConfigEnv()
+	config, err := configEnv.Configuration()
+	if err != nil {
+		fmt.Fprintf(os.Stderr, "Cannot create configuration: %s\n", err.Error())
+		os.Exit(1)
+	}
+	client := osc.NewAPIClient(config)
 	auth := context.WithValue(context.Background(), osc.ContextAWSv4, osc.AWSv4{
 		AccessKey: os.Getenv("OSC_ACCESS_KEY"),
 		SecretKey: os.Getenv("OSC_SECRET_KEY"),
@@ -73,7 +79,7 @@ func ExampleVolume() {
 			osc.CreateVolumeRequest{
 				Size:          10,
 				VolumeType:    "gp2",
-				SubregionName: "eu-west-2a",
+				SubregionName: fmt.Sprintf("%sa", *configEnv.Region),
 			}),
 	}
 	creation, httpRes, err := client.VolumeApi.CreateVolume(auth, &creationOpts)
-- 
2.30.2

