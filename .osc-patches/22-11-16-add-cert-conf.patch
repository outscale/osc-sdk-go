diff --git a/osc/config_env.go b/osc/config_env.go
index 9fcd634f..a09e5149 100644
--- a/osc/config_env.go
+++ b/osc/config_env.go
@@ -28,7 +28,10 @@ package osc
 
 import (
 	"context"
+	"crypto/tls"
+	b64 "encoding/base64"
 	"errors"
+	"net/http"
 	"os"
 )
 
@@ -38,6 +41,10 @@ type ConfigEnv struct {
 	OutscaleApiEndpoint *string
 	ProfileName         *string
 	Region              *string
+	X509ClientCert      *string
+	X509ClientCertB64   *string
+	X509ClientKey       *string
+	X509ClientKeyB64    *string
 }
 
 func NewConfigEnv() *ConfigEnv {
@@ -57,6 +64,19 @@ func NewConfigEnv() *ConfigEnv {
 	if value, present := os.LookupEnv("OSC_REGION"); present {
 		configEnv.Region = &value
 	}
+
+	if value, present := os.LookupEnv("OSC_X509_CLIENT_CERT"); present {
+		configEnv.X509ClientCert = &value
+	}
+	if value, present := os.LookupEnv("OSC_X509_CLIENT_CERT_B64"); present {
+		configEnv.X509ClientCertB64 = &value
+	}
+	if value, present := os.LookupEnv("OSC_X509_CLIENT_KEY"); present {
+		configEnv.X509ClientKey = &value
+	}
+	if value, present := os.LookupEnv("OSC_X509_CLIENT_KEY_B64"); present {
+		configEnv.X509ClientKeyB64 = &value
+	}
 	return &configEnv
 }
 
@@ -102,6 +122,63 @@ func (configEnv *ConfigEnv) Configuration() (*Configuration, error) {
 			EnumValues:   []string{*configEnv.Region},
 		}
 	}
+
+	tlsConfigured := false
+	if configEnv.X509ClientCert != nil && configEnv.X509ClientKey != nil {
+		tlsConfigured = true
+		cert, err := tls.LoadX509KeyPair(*configEnv.X509ClientCert, *configEnv.X509ClientKey)
+		if err != nil {
+			return nil, errors.New("error while loading client certificate and key")
+		}
+
+		tlsconfig := &tls.Config{
+			InsecureSkipVerify: false,
+			Certificates:       []tls.Certificate{cert},
+		}
+
+		httpClient := &http.Client{
+			Transport: &http.Transport{
+				TLSClientConfig: tlsconfig,
+				Proxy:           http.ProxyFromEnvironment,
+			},
+		}
+
+		config.HTTPClient = httpClient
+	}
+
+	if configEnv.X509ClientCertB64 != nil && configEnv.X509ClientKeyB64 != nil {
+		if tlsConfigured {
+			return nil, errors.New("cannot configure client certificate with both file and base64")
+		}
+
+		clientCertificate, err := b64.StdEncoding.DecodeString(*configEnv.X509ClientCertB64)
+		if err != nil {
+			return nil, errors.New("error while decoding client certificate from base64")
+		}
+
+		clientKey, err := b64.StdEncoding.DecodeString(*configEnv.X509ClientKeyB64)
+		if err != nil {
+			return nil, errors.New("error while decoding client key from base64")
+		}
+		cert, err := tls.X509KeyPair(clientCertificate, clientKey)
+		if err != nil {
+			return nil, errors.New("error while loading client certificate and key")
+		}
+
+		tlsconfig := &tls.Config{
+			InsecureSkipVerify: false,
+			Certificates:       []tls.Certificate{cert},
+		}
+
+		httpClient := &http.Client{
+			Transport: &http.Transport{
+				TLSClientConfig: tlsconfig,
+				Proxy:           http.ProxyFromEnvironment,
+			},
+		}
+
+		config.HTTPClient = httpClient
+	}
 	return config, nil
 }
 
diff --git a/osc/config_file.go b/osc/config_file.go
index b35e9537..ee561c2b 100644
--- a/osc/config_file.go
+++ b/osc/config_file.go
@@ -34,10 +34,13 @@ package osc
 
 import (
 	"context"
+	"crypto/tls"
+	b64 "encoding/base64"
 	"encoding/json"
 	"errors"
 	"fmt"
 	"io/ioutil"
+	"net/http"
 	"os"
 	"path"
 )
@@ -47,14 +50,16 @@ type ConfigFile struct {
 }
 
 type Profile struct {
-	AccessKey       string   `json:"access_key"`
-	SecretKey       string   `json:"secret_key"`
-	X509ClientCert  string   `json:"x509_client_cert"`
-	X509_client_key string   `json:"x509_client_key"`
-	Protocol        string   `json:"protocol"`
-	Method          string   `json:"method"`
-	Region          string   `json:"region"`
-	Endpoints       Endpoint `json:"endpoints"`
+	AccessKey         string   `json:"access_key"`
+	SecretKey         string   `json:"secret_key"`
+	X509ClientCert    string   `json:"x509_client_cert"`
+	X509ClientCertB64 string   `json:"x509_client_cert_b64"`
+	X509ClientKey     string   `json:"x509_client_key"`
+	X509ClientKeyB64  string   `json:"x509_client_key_b64"`
+	Protocol          string   `json:"protocol"`
+	Method            string   `json:"method"`
+	Region            string   `json:"region"`
+	Endpoints         Endpoint `json:"endpoints"`
 }
 
 type Endpoint struct {
@@ -152,5 +157,64 @@ func (configFile *ConfigFile) Configuration(profileName string) (*Configuration,
 			},
 		},
 	}
+
+	tlsConfigured := false
+	if len(profile.X509ClientCert) > 0 && len(profile.X509ClientKey) > 0 {
+		tlsConfigured = true
+		cert, err := tls.LoadX509KeyPair(profile.X509ClientCert, profile.X509ClientKey)
+		if err != nil {
+			return nil, errors.New("error while loading client certificate and key")
+		}
+
+		tlsconfig := &tls.Config{
+			InsecureSkipVerify: false,
+			Certificates:       []tls.Certificate{cert},
+		}
+
+		httpClient := &http.Client{
+			Transport: &http.Transport{
+				TLSClientConfig: tlsconfig,
+				Proxy:           http.ProxyFromEnvironment,
+			},
+		}
+
+		config.HTTPClient = httpClient
+	}
+
+	if len(profile.X509ClientCertB64) > 0 && len(profile.X509ClientKeyB64) > 0 {
+		if tlsConfigured {
+			return nil, errors.New("cannot configure client certificate with both file and base64")
+		}
+
+		clientCertificate, err := b64.StdEncoding.DecodeString(profile.X509ClientCertB64)
+		if err != nil {
+			return nil, errors.New("error while decoding client certificate from base64")
+		}
+
+		clientKey, err := b64.StdEncoding.DecodeString(profile.X509ClientKeyB64)
+		if err != nil {
+			return nil, errors.New("error while decoding client key from base64")
+		}
+
+		cert, err := tls.X509KeyPair(clientCertificate, clientKey)
+		if err != nil {
+			return nil, errors.New("error while loading client certificate and key")
+		}
+
+		tlsconfig := &tls.Config{
+			InsecureSkipVerify: false,
+			Certificates:       []tls.Certificate{cert},
+		}
+
+		httpClient := &http.Client{
+			Transport: &http.Transport{
+				TLSClientConfig: tlsconfig,
+				Proxy:           http.ProxyFromEnvironment,
+			},
+		}
+
+		config.HTTPClient = httpClient
+	}
+
 	return config, nil
 }
--

